<?xml version="1.0"?>
<doc>
    <assembly>
        <name>BigInteger</name>
    </assembly>
    <members>
        <member name="T:BigIntegerLibrary.Base10BigInteger">
            <summary>
            Integer inefficiently represented internally using base-10 digits, in order to allow a
            visual representation as a base-10 string. Only for internal use.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.NumberBase">
            <summary>
            10 numeration base for string representation, very inefficient for computations.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.MaxSize">
            <summary>
            Maximum size for numbers is up to 10240 binary digits or approximately (safe to use) 3000 decimal digits.
            The maximum size is, in fact, double the previously specified amount, in order to accommodate operations'
            overflow.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.Zero">
            Integer constants
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.digits">
            <summary>
            The array of digits of the number.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.size">
            <summary>
            The actual number of digits of the number.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.Base10BigInteger.sign">
            <summary>
            The number sign.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.#ctor">
            <summary>
            Default constructor, intializing the Base10BigInteger with zero.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor creating a new Base10BigInteger as a conversion of a regular base-10 long.
            </summary>
            <param name="n">The base-10 long to be converted</param>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.#ctor(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Constructor creating a new Base10BigInteger as a copy of an existing Base10BigInteger.
            </summary>
            <param name="n">The Base10BigInteger to be copied</param>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Equals(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Determines whether the specified Base10BigInteger is equal to the current Base10BigInteger.
            </summary>
            <param name="other">The Base10BigInteger to compare with the current Base10BigInteger</param>
            <returns>True if the specified Base10BigInteger is equal to the current Base10BigInteger,
            false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current Base10BigInteger.
            </summary>
            <param name="o">The System.Object to compare with the current Base10BigInteger</param>
            <returns>True if the specified System.Object is equal to the current Base10BigInteger,
            false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.GetHashCode">
            <summary>
            Serves as a hash function for the Base10BigInteger type.
            </summary>
            <returns>A hash code for the current Base10BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.ToString">
            <summary>
            String representation of the current Base10BigInteger, converted to its base-10 representation.
            </summary>
            <returns>The string representation of the current Base10BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Opposite(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Base10BigInteger inverse with respect to addition.
            </summary>
            <param name="n">The Base10BigInteger whose opposite is to be computed</param>
            <returns>The Base10BigInteger inverse with respect to addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Greater(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Greater test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &gt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.GreaterOrEqual(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Greater or equal test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &gt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Smaller(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Smaller test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &lt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.SmallerOrEqual(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Smaller or equal test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &lt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Abs(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Computes the absolute value of a Base10BigInteger.
            </summary>
            <param name="n">The Base10BigInteger whose absolute value is to be computed</param>
            <returns>The absolute value of the given BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Addition(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Addition operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Subtraction(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Subtraction operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the subtraction</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Multiplication(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Multiplication operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the multiplication</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Implicit(System.Int64)~BigIntegerLibrary.Base10BigInteger">
            <summary>
            Implicit conversion operator from long to Base10BigInteger.
            </summary>
            <param name="n">The long to be converted to a Base10BigInteger</param>
            <returns>The Base10BigInteger converted from the given long</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Equality(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Equality test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a == b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Inequality(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Inequality test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a != b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_GreaterThan(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Greater test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &gt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_LessThan(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Smaller test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &lt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_GreaterThanOrEqual(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Greater or equal test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &gt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_LessThanOrEqual(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Smaller or equal test between two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>True if a &lt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_UnaryNegation(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Base10BigInteger inverse with respect to addition.
            </summary>
            <param name="n">The Base10BigInteger whose opposite is to be computed</param>
            <returns>The Base10BigInteger inverse with respect to addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Addition(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Addition operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Subtraction(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Subtraction operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the subtraction</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Multiply(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Multiplication operation of two Base10BigIntegers.
            </summary>
            <param name="a">The 1st Base10BigInteger</param>
            <param name="b">The 2nd Base10BigInteger</param>
            <returns>The Base10BigInteger result of the multiplication</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Increment(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Incremetation by one operation of a Base10BigInteger.
            </summary>
            <param name="n">The Base10BigInteger to be incremented by one</param>
            <returns>The Base10BigInteger result of incrementing by one</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.op_Decrement(BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Decremetation by one operation of a Base10BigInteger.
            </summary>
            <param name="n">The Base10BigInteger to be decremented by one</param>
            <returns>The Base10BigInteger result of decrementing by one</returns>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Add(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Adds two BigNumbers a and b, where a >= b, a, b non-negative.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Subtract(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Subtracts the Base10BigInteger b from the Base10BigInteger a, where a >= b, a, b non-negative.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.Base10BigInteger.Multiply(BigIntegerLibrary.Base10BigInteger,BigIntegerLibrary.Base10BigInteger)">
            <summary>
            Multiplies two Base10BigIntegers.
            </summary>
        </member>
        <member name="P:BigIntegerLibrary.Base10BigInteger.NumberSign">
            <summary>
            Sets the number sign.
            </summary>
        </member>
        <member name="T:BigIntegerLibrary.BigInteger">
            <summary>
            .NET 2.0 class for handling of very large integers, up to 10240 binary digits or
            approximately (safe to use) 3000 decimal digits.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.NumberBase">
            <summary>
            2^16 numeration base for internal computations, in order to benefit the most from the
            32 bit (or 64 bit) integer processor registers.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.MaxSize">
            <summary>
            Maximum size for numbers is up to 10240 binary digits or approximately (safe to use) 3000 decimal digits.
            The maximum size is, in fact, double the previously specified amount, in order to accommodate operations's
            overflow.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.RatioToBinaryDigits">
            <summary>
            Ratio for the convertion of a BigInteger's size to a binary digits size.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.Zero">
            Integer constants
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.digits">
            <summary>
            The array of digits of the number.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.size">
            <summary>
            The actual number of digits of the number.
            </summary>
        </member>
        <member name="F:BigIntegerLibrary.BigInteger.sign">
            <summary>
            The number sign.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor">
            <summary>
            Default constructor, intializing the BigInteger with zero.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor(System.Int64)">
            <summary>
            Constructor creating a new BigInteger as a conversion of a regular base-10 long.
            </summary>
            <param name="n">The base-10 long to be converted</param>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor(BigIntegerLibrary.BigInteger)">
            <summary>
            Constructor creating a new BigInteger as a copy of an existing BigInteger.
            </summary>
            <param name="n">The BigInteger to be copied</param>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor(System.String)">
            <summary>
            Constructor creating a BigInteger instance out of a base-10 formatted string.
            </summary>
            <param name="numberString">The base-10 formatted string.</param>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Invalid numeric string exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor(System.Byte[])">
            <summary>
            Constructor creating a positive BigInteger by extracting it's digits from a given byte array.
            </summary>
            <param name="byteArray">The byte array</param>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">The byte array's content exceeds the maximum size of a BigInteger
            exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Constructor deserializing a BigInteger.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            BigInteger serializing method, which should not be called manually.
            </summary>
            <param name="info">Serialization information object</param>
            <param name="context">Streaming context object</param>
            <permission cref="T:System.Security.PermissionSet">Public access</permission>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Equals(BigIntegerLibrary.BigInteger)">
            <summary>
            Determines whether the specified BigInteger is equal to the current BigInteger.
            </summary>
            <param name="other">The BigInteger to compare with the current BigInteger</param>
            <returns>True if the specified BigInteger is equal to the current BigInteger,
            false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is equal to the current BigInteger.
            </summary>
            <param name="o">The System.Object to compare with the current BigInteger</param>
            <returns>True if the specified System.Object is equal to the current BigInteger,
            false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.GetHashCode">
            <summary>
            Serves as a hash function for the BigInteger type.
            </summary>
            <returns>A hash code for the current BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.ToString">
            <summary>
            String representation of the current BigInteger, converted to its base-10 representation.
            </summary>
            <returns>The string representation of the current BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.CompareTo(BigIntegerLibrary.BigInteger)">
            <summary>
             Compares this instance to a specified BigInteger.
            </summary>
            <param name="other">The BigInteger to compare this instance with</param>
            <returns>-1 if the current instance is smaller than the given BigInteger,
            0 if the two are equal, 1 otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.CompareTo(System.Object)">
            <summary>
             Compares this instance to a specified object.
            </summary>
            <param name="obj">The object to compare this instance with</param>
            <returns>-1 if the current instance is smaller than the given object,
            0 if the two are equal, 1 otherwise</returns>
            <exception cref="T:System.ArgumentException">obj is not a BigInteger exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.SizeInBinaryDigits(BigIntegerLibrary.BigInteger)">
            <summary>
            Returns a BigInteger's size in binary digits.
            </summary>
            <param name="n">The BigInteger whose size in binary digits is to be determined</param>
            <returns>The BigInteger's size in binary digits</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Opposite(BigIntegerLibrary.BigInteger)">
            <summary>
            BigInteger inverse with respect to addition.
            </summary>
            <param name="n">The BigInteger whose opposite is to be computed</param>
            <returns>The BigInteger inverse with respect to addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Greater(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Greater test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.GreaterOrEqual(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Greater or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Smaller(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Smaller test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.SmallerOrEqual(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Smaller or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Abs(BigIntegerLibrary.BigInteger)">
            <summary>
            Computes the absolute value of a BigInteger.
            </summary>
            <param name="n">The BigInteger whose absolute value is to be computed</param>
            <returns>The absolute value of the given BigInteger</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Addition(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Addition operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Subtraction(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Subtraction operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the subtraction</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Multiplication(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Multiplication operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the multiplication</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Division(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Division operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the division</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Modulo(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Modulo operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the modulo</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Power(BigIntegerLibrary.BigInteger,System.Int32)">
            <summary>
            Returns the power of a BigInteger base to a non-negative exponent by using the
            fast exponentiation algorithm (right to left binary exponentiation).
            </summary>
            <param name="a">The BigInteger base</param>
            <param name="exponent">The non-negative exponent</param>
            <returns>The power of the BigInteger base to the non-negative exponent</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot raise a BigInteger to a negative power exception.</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.IntegerSqrt(BigIntegerLibrary.BigInteger)">
            <summary>
            Integer square root of the given BigInteger using Newton's numeric method.
            </summary>
            <param name="n">The BigInteger whose integer square root is to be computed</param>
            <returns>The integer square root of the given BigInteger</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot compute the integer square root of a negative number exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Gcd(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Euclidean algorithm for computing the greatest common divisor of two non-negative BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The greatest common divisor of the two given BigIntegers</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot compute the Gcd of negative BigIntegers exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.ExtendedEuclidGcd(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger@,BigIntegerLibrary.BigInteger@)">
            <summary>
            Extended Euclidian Gcd algorithm, returning the greatest common divisor of two non-negative BigIntegers,
            while also providing u and v, where: a*u + b*v = gcd(a,b).
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <param name="u">Output BigInteger parameter, where a*u + b*v = gcd(a,b)</param>
            <param name="v">Output BigInteger parameter, where a*u + b*v = gcd(a,b)</param>
            <returns>The greatest common divisor of the two given BigIntegers</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot compute the Gcd of negative BigIntegers exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.ModularInverse(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Computes the modular inverse of a given BigInteger.
            </summary>
            <param name="a">The non-zero BigInteger whose inverse is to be computed</param>
            <param name="n">The BigInteger modulus, which must be greater than or equal to 2</param>
            <returns>The BigInteger equal to a^(-1) mod n</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Invalid number or modulus exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.ModularExponentiation(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Returns the power of a BigInteger to a non-negative exponent modulo n, by using the
            fast exponentiation algorithm (right to left binary exponentiation) and modulo optimizations.
            </summary>
            <param name="a">The BigInteger base</param>
            <param name="exponent">The non-negative exponent</param>
            <param name="n">The modulus, which must be greater than or equal to 2</param>
            <returns>The power of the BigInteger to the non-negative exponent</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Invalid exponent or modulus exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.IsPrime(BigIntegerLibrary.BigInteger)">
            <summary>
            Tests whether the number provided is a prime.
            </summary>
            <param name="number">The number to be tested for primality</param>
            <returns>True, if the number given is a prime, false, otherwise</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Primality is not defined for negative numbers exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Implicit(System.Int64)~BigIntegerLibrary.BigInteger">
            <summary>
            Implicit conversion operator from long to BigInteger.
            </summary>
            <param name="n">The long to be converted to a BigInteger</param>
            <returns>The BigInteger converted from the given long</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Equality(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Equality test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a == b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Inequality(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Inequality test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a != b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_GreaterThan(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Greater test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_LessThan(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Smaller test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt; b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_GreaterThanOrEqual(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Greater or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &gt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_LessThanOrEqual(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Smaller or equal test between two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>True if a &lt;= b, false otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_UnaryNegation(BigIntegerLibrary.BigInteger)">
            <summary>
            BigInteger inverse with respect to addition.
            </summary>
            <param name="n">The BigInteger whose opposite is to be computed</param>
            <returns>The BigInteger inverse with respect to addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Addition(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Addition operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the addition</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Subtraction(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Subtraction operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the subtraction</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Multiply(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Multiplication operation of two BigIntegers.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the multiplication</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Division(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Division operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the division</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Modulus(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Modulo operation of two BigIntegers a and b, b != 0.
            </summary>
            <param name="a">The 1st BigInteger</param>
            <param name="b">The 2nd BigInteger</param>
            <returns>The BigInteger result of the modulo</returns>
            <exception cref="T:BigIntegerLibrary.BigIntegerException">Cannot divide by zero exception</exception>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Increment(BigIntegerLibrary.BigInteger)">
            <summary>
            Incremetation by one operation of a BigInteger.
            </summary>
            <param name="n">The BigInteger to be incremented by one</param>
            <returns>The BigInteger result of incrementing by one</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.op_Decrement(BigIntegerLibrary.BigInteger)">
            <summary>
            Decremetation by one operation of a BigInteger.
            </summary>
            <param name="n">The BigInteger to be decremented by one</param>
            <returns>The BigInteger result of decrementing by one</returns>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Add(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Adds two BigNumbers a and b, where a >= b, a, b non-negative.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Subtract(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Subtracts the BigInteger b from the BigInteger a, where a >= b, a, b non-negative.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Multiply(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Multiplies two BigIntegers.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.DivideByOneDigitNumber(BigIntegerLibrary.BigInteger,System.Int64)">
            <summary>
            Divides a BigInteger by a one-digit int.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.DivideByBigNumber(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger)">
            <summary>
            Divides a BigInteger by another BigInteger.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.DivideByBigNumberSmaller(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger,System.Int32,System.Int32)">
            <summary>
            DivideByBigNumber auxiliary method. 
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Difference(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger,System.Int32,System.Int32)">
            <summary>
            DivideByBigNumber auxilary method.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigInteger.Trial(BigIntegerLibrary.BigInteger,BigIntegerLibrary.BigInteger,System.Int32,System.Int32)">
            <summary>
            DivideByBigNumber auxilary method.
            </summary>
        </member>
        <member name="T:BigIntegerLibrary.BigIntegerException">
            <summary>
            BigInteger-related exception class.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.BigIntegerException.#ctor(System.String,System.Exception)">
            <summary>
            BigIntegerException constructor.
            </summary>
            <param name="message">The exception message</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="F:BigIntegerLibrary.PrimalityTester.MaxMillerRabinIterations">
            <summary>
            Maximum number of iterations for the Miller-Rabin test.
            </summary>
        </member>
        <member name="M:BigIntegerLibrary.PrimalityTester.IsPrime(BigIntegerLibrary.BigInteger)">
            <summary>
            Tests whether the number provided is a prime.
            </summary>
            <param name="number">The number to be tested for primality</param>
            <returns>True, if the number given is a prime, false, otherwise</returns>
        </member>
        <member name="M:BigIntegerLibrary.PrimalityTester.IsPrimeMillerRabinTest(BigIntegerLibrary.BigInteger)">
            <summary>
            Determines whether the given BigInteger number is probably prime, with a probability
            of at least 1/(4^MaxMillerRabinIterations), using the Miller-Rabin primality test.
            </summary>
        </member>
        <member name="T:BigIntegerLibrary.Sign">
            <summary>
            The number's sign, where Positive also stands for the number zero.
            </summary>
        </member>
    </members>
</doc>
